package net.minecraft.data.worldgen;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.OptionalInt;
import java.util.function.Supplier;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Registry;
import net.minecraft.data.BuiltinRegistries;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.world.level.block.SweetBerryBushBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.GenerationStep;
import net.minecraft.world.level.levelgen.Heightmap;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration;
import net.minecraft.world.level.levelgen.feature.blockplacers.ColumnPlacer;
import net.minecraft.world.level.levelgen.feature.blockplacers.DoublePlantPlacer;
import net.minecraft.world.level.levelgen.feature.blockplacers.SimpleBlockPlacer;
import net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.CountConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RangeDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ReplaceSphereConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.BushFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.DarkOakFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.FancyFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaJungleFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaPineFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.ForestFlowerProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.PlainFlowerProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.RotatedBlockProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.SimpleStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.treedecorators.AlterGroundDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.CocoaDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.TrunkVineDecorator;
import net.minecraft.world.level.levelgen.feature.trunkplacers.DarkOakTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.FancyTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.ForkingTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.GiantTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.MegaJungleTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer;
import net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.ConfiguredDecorator;
import net.minecraft.world.level.levelgen.placement.DepthAverageConfigation;
import net.minecraft.world.level.levelgen.placement.FeatureDecorator;
import net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.material.Fluids;

public class Features {
   public static final ConfiguredFeature<?, ?> END_SPIKE;
   public static final ConfiguredFeature<?, ?> END_GATEWAY;
   public static final ConfiguredFeature<?, ?> END_GATEWAY_DELAYED;
   public static final ConfiguredFeature<?, ?> CHORUS_PLANT;
   public static final ConfiguredFeature<?, ?> END_ISLAND;
   public static final ConfiguredFeature<?, ?> END_ISLAND_DECORATED;
   public static final ConfiguredFeature<?, ?> DELTA;
   public static final ConfiguredFeature<?, ?> SMALL_BASALT_COLUMNS;
   public static final ConfiguredFeature<?, ?> LARGE_BASALT_COLUMNS;
   public static final ConfiguredFeature<?, ?> BASALT_BLOBS;
   public static final ConfiguredFeature<?, ?> BLACKSTONE_BLOBS;
   public static final ConfiguredFeature<?, ?> GLOWSTONE_EXTRA;
   public static final ConfiguredFeature<?, ?> GLOWSTONE;
   public static final ConfiguredFeature<?, ?> CRIMSON_FOREST_VEGETATION;
   public static final ConfiguredFeature<?, ?> WARPED_FOREST_VEGETATION;
   public static final ConfiguredFeature<?, ?> NETHER_SPROUTS;
   public static final ConfiguredFeature<?, ?> TWISTING_VINES;
   public static final ConfiguredFeature<?, ?> WEEPING_VINES;
   public static final ConfiguredFeature<?, ?> BASALT_PILLAR;
   public static final ConfiguredFeature<?, ?> SEAGRASS_COLD;
   public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_COLD;
   public static final ConfiguredFeature<?, ?> SEAGRASS_NORMAL;
   public static final ConfiguredFeature<?, ?> SEAGRASS_RIVER;
   public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP;
   public static final ConfiguredFeature<?, ?> SEAGRASS_SWAMP;
   public static final ConfiguredFeature<?, ?> SEAGRASS_WARM;
   public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_WARM;
   public static final ConfiguredFeature<?, ?> SEA_PICKLE;
   public static final ConfiguredFeature<?, ?> ICE_SPIKE;
   public static final ConfiguredFeature<?, ?> ICE_PATCH;
   public static final ConfiguredFeature<?, ?> FOREST_ROCK;
   public static final ConfiguredFeature<?, ?> SEAGRASS_SIMPLE;
   public static final ConfiguredFeature<?, ?> ICEBERG_PACKED;
   public static final ConfiguredFeature<?, ?> ICEBERG_BLUE;
   public static final ConfiguredFeature<?, ?> KELP_COLD;
   public static final ConfiguredFeature<?, ?> KELP_WARM;
   public static final ConfiguredFeature<?, ?> BLUE_ICE;
   public static final ConfiguredFeature<?, ?> BAMBOO_LIGHT;
   public static final ConfiguredFeature<?, ?> BAMBOO;
   public static final ConfiguredFeature<?, ?> VINES;
   public static final ConfiguredFeature<?, ?> LAKE_WATER;
   public static final ConfiguredFeature<?, ?> LAKE_LAVA;
   public static final ConfiguredFeature<?, ?> DISK_CLAY;
   public static final ConfiguredFeature<?, ?> DISK_GRAVEL;
   public static final ConfiguredFeature<?, ?> DISK_SAND;
   public static final ConfiguredFeature<?, ?> FREEZE_TOP_LAYER;
   public static final ConfiguredFeature<?, ?> BONUS_CHEST;
   public static final ConfiguredFeature<?, ?> VOID_START_PLATFORM;
   public static final ConfiguredFeature<?, ?> MONSTER_ROOM;
   public static final ConfiguredFeature<?, ?> WELL;
   public static final ConfiguredFeature<?, ?> FOSSIL;
   public static final ConfiguredFeature<?, ?> SPRING_LAVA_DOUBLE;
   public static final ConfiguredFeature<?, ?> SPRING_LAVA;
   public static final ConfiguredFeature<?, ?> SPRING_DELTA;
   public static final ConfiguredFeature<?, ?> SPRING_CLOSED;
   public static final ConfiguredFeature<?, ?> SPRING_CLOSED_DOUBLE;
   public static final ConfiguredFeature<?, ?> SPRING_OPEN;
   public static final ConfiguredFeature<?, ?> SPRING_WATER;
   public static final ConfiguredFeature<?, ?> PILE_HAY;
   public static final ConfiguredFeature<?, ?> PILE_MELON;
   public static final ConfiguredFeature<?, ?> PILE_SNOW;
   public static final ConfiguredFeature<?, ?> PILE_ICE;
   public static final ConfiguredFeature<?, ?> PILE_PUMPKIN;
   public static final ConfiguredFeature<?, ?> PATCH_FIRE;
   public static final ConfiguredFeature<?, ?> PATCH_SOUL_FIRE;
   public static final ConfiguredFeature<?, ?> PATCH_BROWN_MUSHROOM;
   public static final ConfiguredFeature<?, ?> PATCH_RED_MUSHROOM;
   public static final ConfiguredFeature<?, ?> PATCH_CRIMSON_ROOTS;
   public static final ConfiguredFeature<?, ?> PATCH_SUNFLOWER;
   public static final ConfiguredFeature<?, ?> PATCH_PUMPKIN;
   public static final ConfiguredFeature<?, ?> PATCH_TAIGA_GRASS;
   public static final ConfiguredFeature<?, ?> PATCH_BERRY_BUSH;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_PLAIN;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_FOREST;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_BADLANDS;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_SAVANNA;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_NORMAL;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA_2;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA;
   public static final ConfiguredFeature<?, ?> PATCH_GRASS_JUNGLE;
   public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_2;
   public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH;
   public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_BADLANDS;
   public static final ConfiguredFeature<?, ?> PATCH_MELON;
   public static final ConfiguredFeature<?, ?> PATCH_BERRY_SPARSE;
   public static final ConfiguredFeature<?, ?> PATCH_BERRY_DECORATED;
   public static final ConfiguredFeature<?, ?> PATCH_WATERLILLY;
   public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS_2;
   public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS;
   public static final ConfiguredFeature<?, ?> PATCH_LARGE_FERN;
   public static final ConfiguredFeature<?, ?> PATCH_CACTUS;
   public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DESERT;
   public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DECORATED;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_SWAMP;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_DESERT;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_BADLANDS;
   public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NETHER;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NETHER;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NORMAL;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NORMAL;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_TAIGA;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_TAIGA;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_GIANT;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_GIANT;
   public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_SWAMP;
   public static final ConfiguredFeature<?, ?> RED_MUSHROOM_SWAMP;
   public static final ConfiguredFeature<?, ?> ORE_MAGMA;
   public static final ConfiguredFeature<?, ?> ORE_SOUL_SAND;
   public static final ConfiguredFeature<?, ?> ORE_GOLD_DELTAS;
   public static final ConfiguredFeature<?, ?> ORE_QUARTZ_DELTAS;
   public static final ConfiguredFeature<?, ?> ORE_GOLD_NETHER;
   public static final ConfiguredFeature<?, ?> ORE_QUARTZ_NETHER;
   public static final ConfiguredFeature<?, ?> ORE_GRAVEL_NETHER;
   public static final ConfiguredFeature<?, ?> ORE_BLACKSTONE;
   public static final ConfiguredFeature<?, ?> ORE_DIRT;
   public static final ConfiguredFeature<?, ?> ORE_GRAVEL;
   public static final ConfiguredFeature<?, ?> ORE_GRANITE;
   public static final ConfiguredFeature<?, ?> ORE_DIORITE;
   public static final ConfiguredFeature<?, ?> ORE_ANDESITE;
   public static final ConfiguredFeature<?, ?> ORE_COAL;
   public static final ConfiguredFeature<?, ?> ORE_IRON;
   public static final ConfiguredFeature<?, ?> ORE_GOLD_EXTRA;
   public static final ConfiguredFeature<?, ?> ORE_GOLD;
   public static final ConfiguredFeature<?, ?> ORE_REDSTONE;
   public static final ConfiguredFeature<?, ?> ORE_DIAMOND;
   public static final ConfiguredFeature<?, ?> ORE_LAPIS;
   public static final ConfiguredFeature<?, ?> ORE_INFESTED;
   public static final ConfiguredFeature<?, ?> ORE_EMERALD;
   public static final ConfiguredFeature<?, ?> ORE_DEBRIS_LARGE;
   public static final ConfiguredFeature<?, ?> ORE_DEBRIS_SMALL;
   public static final ConfiguredFeature<?, ?> CRIMSON_FUNGI;
   public static final ConfiguredFeature<HugeFungusConfiguration, ?> CRIMSON_FUNGI_PLANTED;
   public static final ConfiguredFeature<?, ?> WARPED_FUNGI;
   public static final ConfiguredFeature<HugeFungusConfiguration, ?> WARPED_FUNGI_PLANTED;
   public static final ConfiguredFeature<?, ?> HUGE_BROWN_MUSHROOM;
   public static final ConfiguredFeature<?, ?> HUGE_RED_MUSHROOM;
   public static final ConfiguredFeature<TreeConfiguration, ?> OAK;
   public static final ConfiguredFeature<TreeConfiguration, ?> DARK_OAK;
   public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH;
   public static final ConfiguredFeature<TreeConfiguration, ?> ACACIA;
   public static final ConfiguredFeature<TreeConfiguration, ?> SPRUCE;
   public static final ConfiguredFeature<TreeConfiguration, ?> PINE;
   public static final ConfiguredFeature<TreeConfiguration, ?> JUNGLE_TREE;
   public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK;
   public static final ConfiguredFeature<TreeConfiguration, ?> JUNGLE_TREE_NO_VINE;
   public static final ConfiguredFeature<TreeConfiguration, ?> MEGA_JUNGLE_TREE;
   public static final ConfiguredFeature<TreeConfiguration, ?> MEGA_SPRUCE;
   public static final ConfiguredFeature<TreeConfiguration, ?> MEGA_PINE;
   public static final ConfiguredFeature<TreeConfiguration, ?> SUPER_BIRCH_BEES_0002;
   public static final ConfiguredFeature<?, ?> SWAMP_TREE;
   public static final ConfiguredFeature<?, ?> JUNGLE_BUSH;
   public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_0002;
   public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_002;
   public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_005;
   public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_0002;
   public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_002;
   public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_005;
   public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_0002;
   public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_002;
   public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_005;
   public static final ConfiguredFeature<?, ?> OAK_BADLANDS;
   public static final ConfiguredFeature<?, ?> SPRUCE_SNOWY;
   public static final ConfiguredFeature<?, ?> FLOWER_WARM;
   public static final ConfiguredFeature<?, ?> FLOWER_DEFAULT;
   public static final ConfiguredFeature<?, ?> FLOWER_FOREST;
   public static final ConfiguredFeature<?, ?> FLOWER_SWAMP;
   public static final ConfiguredFeature<?, ?> FLOWER_PLAIN;
   public static final ConfiguredFeature<?, ?> FLOWER_PLAIN_DECORATED;
   private static final ImmutableList<Supplier<ConfiguredFeature<?, ?>>> FOREST_FLOWER_FEATURES;
   public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION_COMMON;
   public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION;
   public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_BROWN;
   public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_RED;
   public static final ConfiguredFeature<?, ?> WARM_OCEAN_VEGETATION;
   public static final ConfiguredFeature<?, ?> FOREST_FLOWER_TREES;
   public static final ConfiguredFeature<?, ?> TAIGA_VEGETATION;
   public static final ConfiguredFeature<?, ?> TREES_SHATTERED_SAVANNA;
   public static final ConfiguredFeature<?, ?> TREES_SAVANNA;
   public static final ConfiguredFeature<?, ?> BIRCH_TALL;
   public static final ConfiguredFeature<?, ?> TREES_BIRCH;
   public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN_EDGE;
   public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN;
   public static final ConfiguredFeature<?, ?> TREES_WATER;
   public static final ConfiguredFeature<?, ?> BIRCH_OTHER;
   public static final ConfiguredFeature<?, ?> PLAIN_VEGETATION;
   public static final ConfiguredFeature<?, ?> TREES_JUNGLE_EDGE;
   public static final ConfiguredFeature<?, ?> TREES_GIANT_SPRUCE;
   public static final ConfiguredFeature<?, ?> TREES_GIANT;
   public static final ConfiguredFeature<?, ?> TREES_JUNGLE;
   public static final ConfiguredFeature<?, ?> BAMBOO_VEGETATION;
   public static final ConfiguredFeature<?, ?> MUSHROOM_FIELD_VEGETATION;

   private static <FC extends FeatureConfiguration> ConfiguredFeature<FC, ?> register(String var0, ConfiguredFeature<FC, ?> var1) {
      return (ConfiguredFeature)Registry.register(BuiltinRegistries.CONFIGURED_FEATURE, (String)var0, var1);
   }

   static {
      END_SPIKE = register("end_spike", Feature.END_SPIKE.configured(new SpikeConfiguration(false, ImmutableList.of(), (BlockPos)null)));
      END_GATEWAY = register("end_gateway", Feature.END_GATEWAY.configured(EndGatewayConfiguration.knownExit(ServerLevel.END_SPAWN_POINT, true)).decorated(FeatureDecorator.END_GATEWAY.configured(DecoratorConfiguration.NONE)));
      END_GATEWAY_DELAYED = register("end_gateway_delayed", Feature.END_GATEWAY.configured(EndGatewayConfiguration.delayedExitSearch()));
      CHORUS_PLANT = register("chorus_plant", (ConfiguredFeature)Feature.CHORUS_PLANT.configured(FeatureConfiguration.NONE).decorated(Features.Decorators.HEIGHTMAP_SQUARE).countRandom(4));
      END_ISLAND = register("end_island", Feature.END_ISLAND.configured(FeatureConfiguration.NONE));
      END_ISLAND_DECORATED = register("end_island_decorated", END_ISLAND.decorated(FeatureDecorator.END_ISLAND.configured(DecoratorConfiguration.NONE)));
      DELTA = register("delta", Feature.DELTA_FEATURE.configured(new DeltaFeatureConfiguration(Features.States.LAVA, Features.States.MAGMA_BLOCK, UniformInt.of(3, 4), UniformInt.of(0, 2))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(40))));
      SMALL_BASALT_COLUMNS = register("small_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.fixed(1), UniformInt.of(1, 3))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(4))));
      LARGE_BASALT_COLUMNS = register("large_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.of(2, 1), UniformInt.of(5, 5))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(2))));
      BASALT_BLOBS = register("basalt_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.REPLACE_BLOBS.configured(new ReplaceSphereConfiguration(Features.States.NETHERRACK, Features.States.BASALT, UniformInt.of(3, 4))).range(128)).squared()).count(75));
      BLACKSTONE_BLOBS = register("blackstone_blobs", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.REPLACE_BLOBS.configured(new ReplaceSphereConfiguration(Features.States.NETHERRACK, Features.States.BLACKSTONE, UniformInt.of(3, 4))).range(128)).squared()).count(25));
      GLOWSTONE_EXTRA = register("glowstone_extra", Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.GLOWSTONE.configured(new CountConfiguration(10))));
      GLOWSTONE = register("glowstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).range(128)).squared()).count(10));
      CRIMSON_FOREST_VEGETATION = register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Features.Configs.CRIMSON_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(6))));
      WARPED_FOREST_VEGETATION = register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Features.Configs.WARPED_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(5))));
      NETHER_SPROUTS = register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configured(Features.Configs.NETHER_SPROUTS_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(4))));
      TWISTING_VINES = register("twisting_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.TWISTING_VINES.configured(FeatureConfiguration.NONE).range(128)).squared()).count(10));
      WEEPING_VINES = register("weeping_vines", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.WEEPING_VINES.configured(FeatureConfiguration.NONE).range(128)).squared()).count(10));
      BASALT_PILLAR = register("basalt_pillar", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.BASALT_PILLAR.configured(FeatureConfiguration.NONE).range(128)).squared()).count(10));
      SEAGRASS_COLD = register("seagrass_cold", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.3F)).count(32)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_DEEP_COLD = register("seagrass_deep_cold", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8F)).count(40)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_NORMAL = register("seagrass_normal", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.3F)).count(48)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_RIVER = register("seagrass_river", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.4F)).count(48)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_DEEP = register("seagrass_deep", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8F)).count(48)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_SWAMP = register("seagrass_swamp", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.6F)).count(64)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_WARM = register("seagrass_warm", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.3F)).count(80)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEAGRASS_DEEP_WARM = register("seagrass_deep_warm", ((ConfiguredFeature)Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8F)).count(80)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      SEA_PICKLE = register("sea_pickle", (ConfiguredFeature)Feature.SEA_PICKLE.configured(new CountConfiguration(20)).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).chance(16));
      ICE_SPIKE = register("ice_spike", (ConfiguredFeature)Feature.ICE_SPIKE.configured(FeatureConfiguration.NONE).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(3));
      ICE_PATCH = register("ice_patch", (ConfiguredFeature)Feature.ICE_PATCH.configured(new DiskConfiguration(Features.States.PACKED_ICE, UniformInt.of(2, 1), 1, ImmutableList.of(Features.States.DIRT, Features.States.GRASS_BLOCK, Features.States.PODZOL, Features.States.COARSE_DIRT, Features.States.MYCELIUM, Features.States.SNOW_BLOCK, Features.States.ICE))).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(2));
      FOREST_ROCK = register("forest_rock", (ConfiguredFeature)Feature.FOREST_ROCK.configured(new BlockStateConfiguration(Features.States.MOSSY_COBBLESTONE)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).countRandom(2));
      SEAGRASS_SIMPLE = register("seagrass_simple", Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(Features.States.SEAGRASS, ImmutableList.of(Features.States.STONE), ImmutableList.of(Features.States.WATER), ImmutableList.of(Features.States.WATER))).decorated(FeatureDecorator.CARVING_MASK.configured(new CarvingMaskDecoratorConfiguration(GenerationStep.Carving.LIQUID, 0.1F))));
      ICEBERG_PACKED = register("iceberg_packed", (ConfiguredFeature)Feature.ICEBERG.configured(new BlockStateConfiguration(Features.States.PACKED_ICE)).decorated(FeatureDecorator.ICEBERG.configured(NoneDecoratorConfiguration.INSTANCE)).chance(16));
      ICEBERG_BLUE = register("iceberg_blue", (ConfiguredFeature)Feature.ICEBERG.configured(new BlockStateConfiguration(Features.States.BLUE_ICE)).decorated(FeatureDecorator.ICEBERG.configured(NoneDecoratorConfiguration.INSTANCE)).chance(200));
      KELP_COLD = register("kelp_cold", ((ConfiguredFeature)Feature.KELP.configured(FeatureConfiguration.NONE).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP).squared()).decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(120, 80.0D, 0.0D))));
      KELP_WARM = register("kelp_warm", ((ConfiguredFeature)Feature.KELP.configured(FeatureConfiguration.NONE).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP).squared()).decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(80, 80.0D, 0.0D))));
      BLUE_ICE = register("blue_ice", (ConfiguredFeature)((ConfiguredFeature)Feature.BLUE_ICE.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(30, 32, 64))).squared()).countRandom(19));
      BAMBOO_LIGHT = register("bamboo_light", (ConfiguredFeature)Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.0F)).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(16));
      BAMBOO = register("bamboo", ((ConfiguredFeature)Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.2F)).decorated(Features.Decorators.HEIGHTMAP_WORLD_SURFACE).squared()).decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(160, 80.0D, 0.3D))));
      VINES = register("vines", (ConfiguredFeature)((ConfiguredFeature)Feature.VINES.configured(FeatureConfiguration.NONE).squared()).count(50));
      LAKE_WATER = register("lake_water", Feature.LAKE.configured(new BlockStateConfiguration(Features.States.WATER)).decorated(FeatureDecorator.WATER_LAKE.configured(new ChanceDecoratorConfiguration(4))));
      LAKE_LAVA = register("lake_lava", Feature.LAKE.configured(new BlockStateConfiguration(Features.States.LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
      DISK_CLAY = register("disk_clay", Feature.DISK.configured(new DiskConfiguration(Features.States.CLAY, UniformInt.of(2, 1), 1, ImmutableList.of(Features.States.DIRT, Features.States.CLAY))).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      DISK_GRAVEL = register("disk_gravel", Feature.DISK.configured(new DiskConfiguration(Features.States.GRAVEL, UniformInt.of(2, 3), 2, ImmutableList.of(Features.States.DIRT, Features.States.GRASS_BLOCK))).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
      DISK_SAND = register("disk_sand", (ConfiguredFeature)Feature.DISK.configured(new DiskConfiguration(Features.States.SAND, UniformInt.of(2, 4), 2, ImmutableList.of(Features.States.DIRT, Features.States.GRASS_BLOCK))).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).count(3));
      FREEZE_TOP_LAYER = register("freeze_top_layer", Feature.FREEZE_TOP_LAYER.configured(FeatureConfiguration.NONE));
      BONUS_CHEST = register("bonus_chest", Feature.BONUS_CHEST.configured(FeatureConfiguration.NONE));
      VOID_START_PLATFORM = register("void_start_platform", Feature.VOID_START_PLATFORM.configured(FeatureConfiguration.NONE));
      MONSTER_ROOM = register("monster_room", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.MONSTER_ROOM.configured(FeatureConfiguration.NONE).range(256)).squared()).count(8));
      WELL = register("desert_well", (ConfiguredFeature)Feature.DESERT_WELL.configured(FeatureConfiguration.NONE).decorated(Features.Decorators.HEIGHTMAP_SQUARE).chance(1000));
      FOSSIL = register("fossil", (ConfiguredFeature)Feature.FOSSIL.configured(FeatureConfiguration.NONE).chance(64));
      SPRING_LAVA_DOUBLE = register("spring_lava_double", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(Features.Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured(new RangeDecoratorConfiguration(8, 16, 256))).squared()).count(40));
      SPRING_LAVA = register("spring_lava", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(Features.Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured(new RangeDecoratorConfiguration(8, 16, 256))).squared()).count(20));
      SPRING_DELTA = register("spring_delta", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(new SpringConfiguration(Features.States.LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).decorated(Features.Decorators.RANGE_4_8_ROOFED).squared()).count(16));
      SPRING_CLOSED = register("spring_closed", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(Features.Configs.CLOSED_NETHER_SPRING_CONFIG).decorated(Features.Decorators.RANGE_10_20_ROOFED).squared()).count(16));
      SPRING_CLOSED_DOUBLE = register("spring_closed_double", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(Features.Configs.CLOSED_NETHER_SPRING_CONFIG).decorated(Features.Decorators.RANGE_10_20_ROOFED).squared()).count(32));
      SPRING_OPEN = register("spring_open", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(new SpringConfiguration(Features.States.LAVA_STATE, false, 4, 1, ImmutableSet.of(Blocks.NETHERRACK))).decorated(Features.Decorators.RANGE_4_8_ROOFED).squared()).count(8));
      SPRING_WATER = register("spring_water", (ConfiguredFeature)((ConfiguredFeature)Feature.SPRING.configured(new SpringConfiguration(Features.States.WATER_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).decorated(FeatureDecorator.RANGE_BIASED.configured(new RangeDecoratorConfiguration(8, 8, 256))).squared()).count(50));
      PILE_HAY = register("pile_hay", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new RotatedBlockProvider(Blocks.HAY_BLOCK))));
      PILE_MELON = register("pile_melon", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new SimpleStateProvider(Features.States.MELON))));
      PILE_SNOW = register("pile_snow", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new SimpleStateProvider(Features.States.SNOW))));
      PILE_ICE = register("pile_ice", Feature.BLOCK_PILE.configured(new BlockPileConfiguration((new WeightedStateProvider()).add(Features.States.BLUE_ICE, 1).add(Features.States.PACKED_ICE, 5))));
      PILE_PUMPKIN = register("pile_pumpkin", Feature.BLOCK_PILE.configured(new BlockPileConfiguration((new WeightedStateProvider()).add(Features.States.PUMPKIN, 19).add(Features.States.JACK_O_LANTERN, 1))));
      PATCH_FIRE = register("patch_fire", Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.FIRE), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(Features.States.NETHERRACK.getBlock())).noProjection().build()).decorated(Features.Decorators.FIRE));
      PATCH_SOUL_FIRE = register("patch_soul_fire", Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SOUL_FIRE), new SimpleBlockPlacer())).tries(64).whitelist(ImmutableSet.of(Features.States.SOUL_SOIL.getBlock())).noProjection().build()).decorated(Features.Decorators.FIRE));
      PATCH_BROWN_MUSHROOM = register("patch_brown_mushroom", Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE)).tries(64).noProjection().build()));
      PATCH_RED_MUSHROOM = register("patch_red_mushroom", Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.RED_MUSHROOM), SimpleBlockPlacer.INSTANCE)).tries(64).noProjection().build()));
      PATCH_CRIMSON_ROOTS = register("patch_crimson_roots", (ConfiguredFeature)Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.CRIMSON_ROOTS), new SimpleBlockPlacer())).tries(64).noProjection().build()).range(128));
      PATCH_SUNFLOWER = register("patch_sunflower", (ConfiguredFeature)Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SUNFLOWER), new DoublePlantPlacer())).tries(64).noProjection().build()).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(10));
      PATCH_PUMPKIN = register("patch_pumpkin", (ConfiguredFeature)Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.PUMPKIN), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).noProjection().build()).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(32));
      PATCH_TAIGA_GRASS = register("patch_taiga_grass", Feature.RANDOM_PATCH.configured(Features.Configs.TAIGA_GRASS_CONFIG));
      PATCH_BERRY_BUSH = register("patch_berry_bush", Feature.RANDOM_PATCH.configured(Features.Configs.SWEET_BERRY_BUSH_CONFIG));
      PATCH_GRASS_PLAIN = register("patch_grass_plain", Feature.RANDOM_PATCH.configured(Features.Configs.DEFAULT_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8D, 5, 10))));
      PATCH_GRASS_FOREST = register("patch_grass_forest", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.DEFAULT_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
      PATCH_GRASS_BADLANDS = register("patch_grass_badlands", Feature.RANDOM_PATCH.configured(Features.Configs.DEFAULT_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
      PATCH_GRASS_SAVANNA = register("patch_grass_savanna", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.DEFAULT_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
      PATCH_GRASS_NORMAL = register("patch_grass_normal", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.DEFAULT_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(5));
      PATCH_GRASS_TAIGA_2 = register("patch_grass_taiga_2", Feature.RANDOM_PATCH.configured(Features.Configs.TAIGA_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
      PATCH_GRASS_TAIGA = register("patch_grass_taiga", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.TAIGA_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(7));
      PATCH_GRASS_JUNGLE = register("patch_grass_jungle", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.JUNGLE_GRASS_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(25));
      PATCH_DEAD_BUSH_2 = register("patch_dead_bush_2", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.DEAD_BUSH_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
      PATCH_DEAD_BUSH = register("patch_dead_bush", Feature.RANDOM_PATCH.configured(Features.Configs.DEAD_BUSH_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
      PATCH_DEAD_BUSH_BADLANDS = register("patch_dead_bush_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.DEAD_BUSH_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
      PATCH_MELON = register("patch_melon", Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.MELON), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).canReplace().noProjection().build()).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
      PATCH_BERRY_SPARSE = register("patch_berry_sparse", PATCH_BERRY_BUSH.decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
      PATCH_BERRY_DECORATED = register("patch_berry_decorated", (ConfiguredFeature)PATCH_BERRY_BUSH.decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(12));
      PATCH_WATERLILLY = register("patch_waterlilly", (ConfiguredFeature)Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.LILY_PAD), SimpleBlockPlacer.INSTANCE)).tries(10).build()).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(4));
      PATCH_TALL_GRASS_2 = register("patch_tall_grass_2", ((ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.TALL_GRASS_CONFIG).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP).squared()).decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8D, 0, 7))));
      PATCH_TALL_GRASS = register("patch_tall_grass", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.TALL_GRASS_CONFIG).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(7));
      PATCH_LARGE_FERN = register("patch_large_fern", (ConfiguredFeature)Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.LARGE_FERN), new DoublePlantPlacer())).tries(64).noProjection().build()).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(7));
      PATCH_CACTUS = register("patch_cactus", Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.CACTUS), new ColumnPlacer(1, 2))).tries(10).noProjection().build()));
      PATCH_CACTUS_DESERT = register("patch_cactus_desert", (ConfiguredFeature)PATCH_CACTUS.decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(10));
      PATCH_CACTUS_DECORATED = register("patch_cactus_decorated", (ConfiguredFeature)PATCH_CACTUS.decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(5));
      PATCH_SUGAR_CANE_SWAMP = register("patch_sugar_cane_swamp", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.SUGAR_CANE_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
      PATCH_SUGAR_CANE_DESERT = register("patch_sugar_cane_desert", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.SUGAR_CANE_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(60));
      PATCH_SUGAR_CANE_BADLANDS = register("patch_sugar_cane_badlands", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.SUGAR_CANE_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(13));
      PATCH_SUGAR_CANE = register("patch_sugar_cane", (ConfiguredFeature)Feature.RANDOM_PATCH.configured(Features.Configs.SUGAR_CANE_CONFIG).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(10));
      BROWN_MUSHROOM_NETHER = register("brown_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_BROWN_MUSHROOM.range(128)).chance(2));
      RED_MUSHROOM_NETHER = register("red_mushroom_nether", (ConfiguredFeature)((ConfiguredFeature)PATCH_RED_MUSHROOM.range(128)).chance(2));
      BROWN_MUSHROOM_NORMAL = register("brown_mushroom_normal", (ConfiguredFeature)PATCH_BROWN_MUSHROOM.decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(4));
      RED_MUSHROOM_NORMAL = register("red_mushroom_normal", (ConfiguredFeature)PATCH_RED_MUSHROOM.decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(8));
      BROWN_MUSHROOM_TAIGA = register("brown_mushroom_taiga", ((ConfiguredFeature)PATCH_BROWN_MUSHROOM.chance(4)).decorated(Features.Decorators.HEIGHTMAP_SQUARE));
      RED_MUSHROOM_TAIGA = register("red_mushroom_taiga", ((ConfiguredFeature)PATCH_RED_MUSHROOM.chance(8)).decorated(Features.Decorators.HEIGHTMAP_DOUBLE_SQUARE));
      BROWN_MUSHROOM_GIANT = register("brown_mushroom_giant", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.count(3));
      RED_MUSHROOM_GIANT = register("red_mushroom_giant", (ConfiguredFeature)RED_MUSHROOM_TAIGA.count(3));
      BROWN_MUSHROOM_SWAMP = register("brown_mushroom_swamp", (ConfiguredFeature)BROWN_MUSHROOM_TAIGA.count(8));
      RED_MUSHROOM_SWAMP = register("red_mushroom_swamp", (ConfiguredFeature)RED_MUSHROOM_TAIGA.count(8));
      ORE_MAGMA = register("ore_magma", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.MAGMA_BLOCK, 33)).decorated(FeatureDecorator.MAGMA.configured(NoneDecoratorConfiguration.INSTANCE)).squared()).count(4));
      ORE_SOUL_SAND = register("ore_soul_sand", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.SOUL_SAND, 12)).range(32)).squared()).count(12));
      ORE_GOLD_DELTAS = register("ore_gold_deltas", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.NETHER_GOLD_ORE, 10)).decorated(Features.Decorators.RANGE_10_20_ROOFED).squared()).count(20));
      ORE_QUARTZ_DELTAS = register("ore_quartz_deltas", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.NETHER_QUARTZ_ORE, 14)).decorated(Features.Decorators.RANGE_10_20_ROOFED).squared()).count(32));
      ORE_GOLD_NETHER = register("ore_gold_nether", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.NETHER_GOLD_ORE, 10)).decorated(Features.Decorators.RANGE_10_20_ROOFED).squared()).count(10));
      ORE_QUARTZ_NETHER = register("ore_quartz_nether", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.NETHER_QUARTZ_ORE, 14)).decorated(Features.Decorators.RANGE_10_20_ROOFED).squared()).count(16));
      ORE_GRAVEL_NETHER = register("ore_gravel_nether", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.GRAVEL, 33)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(5, 0, 37))).squared()).count(2));
      ORE_BLACKSTONE = register("ore_blackstone", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, Features.States.BLACKSTONE, 33)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(5, 10, 37))).squared()).count(2));
      ORE_DIRT = register("ore_dirt", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.DIRT, 33)).range(256)).squared()).count(10));
      ORE_GRAVEL = register("ore_gravel", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.GRAVEL, 33)).range(256)).squared()).count(8));
      ORE_GRANITE = register("ore_granite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.GRANITE, 33)).range(80)).squared()).count(10));
      ORE_DIORITE = register("ore_diorite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.DIORITE, 33)).range(80)).squared()).count(10));
      ORE_ANDESITE = register("ore_andesite", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.ANDESITE, 33)).range(80)).squared()).count(10));
      ORE_COAL = register("ore_coal", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.COAL_ORE, 17)).range(128)).squared()).count(20));
      ORE_IRON = register("ore_iron", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.IRON_ORE, 9)).range(64)).squared()).count(20));
      ORE_GOLD_EXTRA = register("ore_gold_extra", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.GOLD_ORE, 9)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(32, 32, 80))).squared()).count(20));
      ORE_GOLD = register("ore_gold", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.GOLD_ORE, 9)).range(32)).squared()).count(2));
      ORE_REDSTONE = register("ore_redstone", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.REDSTONE_ORE, 8)).range(16)).squared()).count(8));
      ORE_DIAMOND = register("ore_diamond", (ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.DIAMOND_ORE, 8)).range(16)).squared());
      ORE_LAPIS = register("ore_lapis", (ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.LAPIS_ORE, 7)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured(new DepthAverageConfigation(16, 16))).squared());
      ORE_INFESTED = register("ore_infested", (ConfiguredFeature)((ConfiguredFeature)((ConfiguredFeature)Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, Features.States.INFESTED_STONE, 9)).range(64)).squared()).count(7));
      ORE_EMERALD = register("ore_emerald", Feature.EMERALD_ORE.configured(new ReplaceBlockConfiguration(Features.States.STONE, Features.States.EMERALD_ORE)).decorated(FeatureDecorator.EMERALD_ORE.configured(DecoratorConfiguration.NONE)));
      ORE_DEBRIS_LARGE = register("ore_debris_large", (ConfiguredFeature)Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, Features.States.ANCIENT_DEBRIS, 3)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured(new DepthAverageConfigation(16, 8))).squared());
      ORE_DEBRIS_SMALL = register("ore_debris_small", (ConfiguredFeature)Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, Features.States.ANCIENT_DEBRIS, 2)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(8, 16, 128))).squared());
      CRIMSON_FUNGI = register("crimson_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(8))));
      CRIMSON_FUNGI_PLANTED = register("crimson_fungi_planted", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG));
      WARPED_FUNGI = register("warped_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(8))));
      WARPED_FUNGI_PLANTED = register("warped_fungi_planted", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_PLANTED_CONFIG));
      HUGE_BROWN_MUSHROOM = register("huge_brown_mushroom", Feature.HUGE_BROWN_MUSHROOM.configured(new HugeMushroomFeatureConfiguration(new SimpleStateProvider(Features.States.HUGE_BROWN_MUSHROOM), new SimpleStateProvider(Features.States.HUGE_MUSHROOM_STEM), 3)));
      HUGE_RED_MUSHROOM = register("huge_red_mushroom", Feature.HUGE_RED_MUSHROOM.configured(new HugeMushroomFeatureConfiguration(new SimpleStateProvider(Features.States.HUGE_RED_MUSHROOM), new SimpleStateProvider(Features.States.HUGE_MUSHROOM_STEM), 2)));
      OAK = register("oak", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.OAK_LOG), new SimpleStateProvider(Features.States.OAK_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 2, 0), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));
      DARK_OAK = register("dark_oak", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.DARK_OAK_LOG), new SimpleStateProvider(Features.States.DARK_OAK_LEAVES), new DarkOakFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0)), new DarkOakTrunkPlacer(6, 2, 1), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty()))).maxWaterDepth(2147483647).heightmap(Heightmap.Types.MOTION_BLOCKING).ignoreVines().build()));
      BIRCH = register("birch", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.BIRCH_LOG), new SimpleStateProvider(Features.States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 2, 0), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));
      ACACIA = register("acacia", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.ACACIA_LOG), new SimpleStateProvider(Features.States.ACACIA_LEAVES), new AcaciaFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0)), new ForkingTrunkPlacer(5, 2, 2), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build()));
      SPRUCE = register("spruce", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.SPRUCE_LOG), new SimpleStateProvider(Features.States.SPRUCE_LEAVES), new SpruceFoliagePlacer(UniformInt.of(2, 1), UniformInt.of(0, 2), UniformInt.of(1, 1)), new StraightTrunkPlacer(5, 2, 1), new TwoLayersFeatureSize(2, 0, 2))).ignoreVines().build()));
      PINE = register("pine", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.SPRUCE_LOG), new SimpleStateProvider(Features.States.SPRUCE_LEAVES), new PineFoliagePlacer(UniformInt.fixed(1), UniformInt.fixed(1), UniformInt.of(3, 1)), new StraightTrunkPlacer(6, 4, 0), new TwoLayersFeatureSize(2, 0, 2))).ignoreVines().build()));
      JUNGLE_TREE = register("jungle_tree", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.JUNGLE_LOG), new SimpleStateProvider(Features.States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1))).decorators(ImmutableList.of(new CocoaDecorator(0.2F), TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).ignoreVines().build()));
      FANCY_OAK = register("fancy_oak", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.OAK_LOG), new SimpleStateProvider(Features.States.OAK_LEAVES), new FancyFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(4), 4), new FancyTrunkPlacer(3, 11, 0), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4)))).ignoreVines().heightmap(Heightmap.Types.MOTION_BLOCKING).build()));
      JUNGLE_TREE_NO_VINE = register("jungle_tree_no_vine", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.JUNGLE_LOG), new SimpleStateProvider(Features.States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().build()));
      MEGA_JUNGLE_TREE = register("mega_jungle_tree", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.JUNGLE_LOG), new SimpleStateProvider(Features.States.JUNGLE_LEAVES), new MegaJungleFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).build()));
      MEGA_SPRUCE = register("mega_spruce", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.SPRUCE_LOG), new SimpleStateProvider(Features.States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(13, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(Features.States.PODZOL)))).build()));
      MEGA_PINE = register("mega_pine", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.SPRUCE_LOG), new SimpleStateProvider(Features.States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(3, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2))).decorators(ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(Features.States.PODZOL)))).build()));
      SUPER_BIRCH_BEES_0002 = register("super_birch_bees_0002", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.BIRCH_LOG), new SimpleStateProvider(Features.States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayersFeatureSize(1, 0, 1))).ignoreVines().decorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002)).build()));
      SWAMP_TREE = register("swamp_tree", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.OAK_LOG), new SimpleStateProvider(Features.States.OAK_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(3), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayersFeatureSize(1, 0, 1))).maxWaterDepth(1).decorators(ImmutableList.of(LeaveVineDecorator.INSTANCE)).build()).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
      JUNGLE_BUSH = register("jungle_bush", Feature.TREE.configured((new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(Features.States.JUNGLE_LOG), new SimpleStateProvider(Features.States.OAK_LEAVES), new BushFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(1), 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayersFeatureSize(0, 0, 0))).heightmap(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).build()));
      OAK_BEES_0002 = register("oak_bees_0002", Feature.TREE.configured(((TreeConfiguration)OAK.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002))));
      OAK_BEES_002 = register("oak_bees_002", Feature.TREE.configured(((TreeConfiguration)OAK.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_002))));
      OAK_BEES_005 = register("oak_bees_005", Feature.TREE.configured(((TreeConfiguration)OAK.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_005))));
      BIRCH_BEES_0002 = register("birch_bees_0002", Feature.TREE.configured(((TreeConfiguration)BIRCH.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002))));
      BIRCH_BEES_002 = register("birch_bees_002", Feature.TREE.configured(((TreeConfiguration)BIRCH.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_002))));
      BIRCH_BEES_005 = register("birch_bees_005", Feature.TREE.configured(((TreeConfiguration)BIRCH.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_005))));
      FANCY_OAK_BEES_0002 = register("fancy_oak_bees_0002", Feature.TREE.configured(((TreeConfiguration)FANCY_OAK.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_0002))));
      FANCY_OAK_BEES_002 = register("fancy_oak_bees_002", Feature.TREE.configured(((TreeConfiguration)FANCY_OAK.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_002))));
      FANCY_OAK_BEES_005 = register("fancy_oak_bees_005", Feature.TREE.configured(((TreeConfiguration)FANCY_OAK.config()).withDecorators(ImmutableList.of(Features.Decorators.BEEHIVE_005))));
      OAK_BADLANDS = register("oak_badlands", OAK.decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(5, 0.1F, 1))));
      SPRUCE_SNOWY = register("spruce_snowy", SPRUCE.decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
      FLOWER_WARM = register("flower_warm", (ConfiguredFeature)Feature.FLOWER.configured(Features.Configs.DEFAULT_FLOWER_CONFIG).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(4));
      FLOWER_DEFAULT = register("flower_default", (ConfiguredFeature)Feature.FLOWER.configured(Features.Configs.DEFAULT_FLOWER_CONFIG).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(2));
      FLOWER_FOREST = register("flower_forest", (ConfiguredFeature)Feature.FLOWER.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(ForestFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE)).tries(64).build()).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(100));
      FLOWER_SWAMP = register("flower_swamp", Feature.FLOWER.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.BLUE_ORCHID), SimpleBlockPlacer.INSTANCE)).tries(64).build()).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE));
      FLOWER_PLAIN = register("flower_plain", Feature.FLOWER.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(PlainFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE)).tries(64).build()));
      FLOWER_PLAIN_DECORATED = register("flower_plain_decorated", ((ConfiguredFeature)FLOWER_PLAIN.decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP).squared()).decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8D, 15, 4))));
      FOREST_FLOWER_FEATURES = ImmutableList.of(() -> {
         return Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.LILAC), new DoublePlantPlacer())).tries(64).noProjection().build());
      }, () -> {
         return Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.ROSE_BUSH), new DoublePlantPlacer())).tries(64).noProjection().build());
      }, () -> {
         return Feature.RANDOM_PATCH.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.PEONY), new DoublePlantPlacer())).tries(64).noProjection().build());
      }, () -> {
         return Feature.NO_BONEMEAL_FLOWER.configured((new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE)).tries(64).build());
      });
      FOREST_FLOWER_VEGETATION_COMMON = register("forest_flower_vegetation_common", (ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration(FOREST_FLOWER_FEATURES)).count(UniformInt.of(-1, 4))).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(5));
      FOREST_FLOWER_VEGETATION = register("forest_flower_vegetation", (ConfiguredFeature)((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration(FOREST_FLOWER_FEATURES)).count(UniformInt.of(-3, 4))).decorated(Features.Decorators.ADD_32).decorated(Features.Decorators.HEIGHTMAP_SQUARE).count(5));
      DARK_FOREST_VEGETATION_BROWN = register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(HUGE_BROWN_MUSHROOM.weighted(0.025F), HUGE_RED_MUSHROOM.weighted(0.05F), DARK_OAK.weighted(0.6666667F), BIRCH.weighted(0.2F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
      DARK_FOREST_VEGETATION_RED = register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(HUGE_RED_MUSHROOM.weighted(0.025F), HUGE_BROWN_MUSHROOM.weighted(0.05F), DARK_OAK.weighted(0.6666667F), BIRCH.weighted(0.2F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
      WARM_OCEAN_VEGETATION = register("warm_ocean_vegetation", ((ConfiguredFeature)Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration(ImmutableList.of(() -> {
         return Feature.CORAL_TREE.configured(FeatureConfiguration.NONE);
      }, () -> {
         return Feature.CORAL_CLAW.configured(FeatureConfiguration.NONE);
      }, () -> {
         return Feature.CORAL_MUSHROOM.configured(FeatureConfiguration.NONE);
      }))).decorated(Features.Decorators.TOP_SOLID_HEIGHTMAP).squared()).decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(20, 400.0D, 0.0D))));
      FOREST_FLOWER_TREES = register("forest_flower_trees", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(BIRCH_BEES_002.weighted(0.2F), FANCY_OAK_BEES_002.weighted(0.1F)), OAK_BEES_002)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(6, 0.1F, 1))));
      TAIGA_VEGETATION = register("taiga_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(PINE.weighted(0.33333334F)), SPRUCE)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
      TREES_SHATTERED_SAVANNA = register("trees_shattered_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(ACACIA.weighted(0.8F)), OAK)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
      TREES_SAVANNA = register("trees_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(ACACIA.weighted(0.8F)), OAK)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(1, 0.1F, 1))));
      BIRCH_TALL = register("birch_tall", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(SUPER_BIRCH_BEES_0002.weighted(0.5F)), BIRCH_BEES_0002)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
      TREES_BIRCH = register("trees_birch", BIRCH_BEES_0002.decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
      TREES_MOUNTAIN_EDGE = register("trees_mountain_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(SPRUCE.weighted(0.666F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(3, 0.1F, 1))));
      TREES_MOUNTAIN = register("trees_mountain", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(SPRUCE.weighted(0.666F), FANCY_OAK.weighted(0.1F)), OAK)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
      TREES_WATER = register("trees_water", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.1F)), OAK)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1F, 1))));
      BIRCH_OTHER = register("birch_other", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(BIRCH_BEES_0002.weighted(0.2F), FANCY_OAK_BEES_0002.weighted(0.1F)), OAK_BEES_0002)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
      PLAIN_VEGETATION = register("plain_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(FANCY_OAK_BEES_005.weighted(0.33333334F)), OAK_BEES_005)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.05F, 1))));
      TREES_JUNGLE_EDGE = register("trees_jungle_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.1F), JUNGLE_BUSH.weighted(0.5F)), JUNGLE_TREE)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1F, 1))));
      TREES_GIANT_SPRUCE = register("trees_giant_spruce", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(MEGA_SPRUCE.weighted(0.33333334F), PINE.weighted(0.33333334F)), SPRUCE)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
      TREES_GIANT = register("trees_giant", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(MEGA_SPRUCE.weighted(0.025641026F), MEGA_PINE.weighted(0.30769232F), PINE.weighted(0.33333334F)), SPRUCE)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1F, 1))));
      TREES_JUNGLE = register("trees_jungle", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.1F), JUNGLE_BUSH.weighted(0.5F), MEGA_JUNGLE_TREE.weighted(0.33333334F)), JUNGLE_TREE)).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(50, 0.1F, 1))));
      BAMBOO_VEGETATION = register("bamboo_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration(ImmutableList.of(FANCY_OAK.weighted(0.05F), JUNGLE_BUSH.weighted(0.15F), MEGA_JUNGLE_TREE.weighted(0.7F)), Feature.RANDOM_PATCH.configured(Features.Configs.JUNGLE_GRASS_CONFIG))).decorated(Features.Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(30, 0.1F, 1))));
      MUSHROOM_FIELD_VEGETATION = register("mushroom_field_vegetation", Feature.RANDOM_BOOLEAN_SELECTOR.configured(new RandomBooleanFeatureConfiguration(() -> {
         return HUGE_RED_MUSHROOM;
      }, () -> {
         return HUGE_BROWN_MUSHROOM;
      })).decorated(Features.Decorators.HEIGHTMAP_SQUARE));
   }

   public static final class Configs {
      public static final RandomPatchConfiguration DEFAULT_GRASS_CONFIG;
      public static final RandomPatchConfiguration TAIGA_GRASS_CONFIG;
      public static final RandomPatchConfiguration JUNGLE_GRASS_CONFIG;
      public static final RandomPatchConfiguration DEFAULT_FLOWER_CONFIG;
      public static final RandomPatchConfiguration DEAD_BUSH_CONFIG;
      public static final RandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG;
      public static final RandomPatchConfiguration TALL_GRASS_CONFIG;
      public static final RandomPatchConfiguration SUGAR_CANE_CONFIG;
      public static final SpringConfiguration LAVA_SPRING_CONFIG;
      public static final SpringConfiguration CLOSED_NETHER_SPRING_CONFIG;
      public static final BlockPileConfiguration CRIMSON_FOREST_CONFIG;
      public static final BlockPileConfiguration WARPED_FOREST_CONFIG;
      public static final BlockPileConfiguration NETHER_SPROUTS_CONFIG;

      static {
         DEFAULT_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.GRASS), SimpleBlockPlacer.INSTANCE)).tries(32).build();
         TAIGA_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(Features.States.GRASS, 1).add(Features.States.FERN, 4), SimpleBlockPlacer.INSTANCE)).tries(32).build();
         JUNGLE_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(Features.States.GRASS, 3).add(Features.States.FERN, 1), SimpleBlockPlacer.INSTANCE)).blacklist(ImmutableSet.of(Features.States.PODZOL)).tries(32).build();
         DEFAULT_FLOWER_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder((new WeightedStateProvider()).add(Features.States.POPPY, 2).add(Features.States.DANDELION, 1), SimpleBlockPlacer.INSTANCE)).tries(64).build();
         DEAD_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE)).tries(4).build();
         SWEET_BERRY_BUSH_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE)).tries(64).whitelist(ImmutableSet.of(Features.States.GRASS_BLOCK.getBlock())).noProjection().build();
         TALL_GRASS_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.TALL_GRASS), new DoublePlantPlacer())).tries(64).noProjection().build();
         SUGAR_CANE_CONFIG = (new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(Features.States.SUGAR_CANE), new ColumnPlacer(2, 2))).tries(20).xspread(4).yspread(0).zspread(4).noProjection().needWater().build();
         LAVA_SPRING_CONFIG = new SpringConfiguration(Features.States.LAVA_STATE, true, 4, 1, ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
         CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(Features.States.LAVA_STATE, false, 5, 0, ImmutableSet.of(Blocks.NETHERRACK));
         CRIMSON_FOREST_CONFIG = new BlockPileConfiguration((new WeightedStateProvider()).add(Features.States.CRIMSON_ROOTS, 87).add(Features.States.CRIMSON_FUNGUS, 11).add(Features.States.WARPED_FUNGUS, 1));
         WARPED_FOREST_CONFIG = new BlockPileConfiguration((new WeightedStateProvider()).add(Features.States.WARPED_ROOTS, 85).add(Features.States.CRIMSON_ROOTS, 1).add(Features.States.WARPED_FUNGUS, 13).add(Features.States.CRIMSON_FUNGUS, 1));
         NETHER_SPROUTS_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(Features.States.NETHER_SPROUTS));
      }
   }

   public static final class States {
      protected static final BlockState GRASS;
      protected static final BlockState FERN;
      protected static final BlockState PODZOL;
      protected static final BlockState COARSE_DIRT;
      protected static final BlockState MYCELIUM;
      protected static final BlockState SNOW_BLOCK;
      protected static final BlockState ICE;
      protected static final BlockState OAK_LOG;
      protected static final BlockState OAK_LEAVES;
      protected static final BlockState JUNGLE_LOG;
      protected static final BlockState JUNGLE_LEAVES;
      protected static final BlockState SPRUCE_LOG;
      protected static final BlockState SPRUCE_LEAVES;
      protected static final BlockState ACACIA_LOG;
      protected static final BlockState ACACIA_LEAVES;
      protected static final BlockState BIRCH_LOG;
      protected static final BlockState BIRCH_LEAVES;
      protected static final BlockState DARK_OAK_LOG;
      protected static final BlockState DARK_OAK_LEAVES;
      protected static final BlockState GRASS_BLOCK;
      protected static final BlockState LARGE_FERN;
      protected static final BlockState TALL_GRASS;
      protected static final BlockState LILAC;
      protected static final BlockState ROSE_BUSH;
      protected static final BlockState PEONY;
      protected static final BlockState BROWN_MUSHROOM;
      protected static final BlockState RED_MUSHROOM;
      protected static final BlockState PACKED_ICE;
      protected static final BlockState BLUE_ICE;
      protected static final BlockState LILY_OF_THE_VALLEY;
      protected static final BlockState BLUE_ORCHID;
      protected static final BlockState POPPY;
      protected static final BlockState DANDELION;
      protected static final BlockState DEAD_BUSH;
      protected static final BlockState MELON;
      protected static final BlockState PUMPKIN;
      protected static final BlockState SWEET_BERRY_BUSH;
      protected static final BlockState FIRE;
      protected static final BlockState SOUL_FIRE;
      protected static final BlockState NETHERRACK;
      protected static final BlockState SOUL_SOIL;
      protected static final BlockState CRIMSON_ROOTS;
      protected static final BlockState LILY_PAD;
      protected static final BlockState SNOW;
      protected static final BlockState JACK_O_LANTERN;
      protected static final BlockState SUNFLOWER;
      protected static final BlockState CACTUS;
      protected static final BlockState SUGAR_CANE;
      protected static final BlockState HUGE_RED_MUSHROOM;
      protected static final BlockState HUGE_BROWN_MUSHROOM;
      protected static final BlockState HUGE_MUSHROOM_STEM;
      protected static final FluidState WATER_STATE;
      protected static final FluidState LAVA_STATE;
      protected static final BlockState WATER;
      protected static final BlockState LAVA;
      protected static final BlockState DIRT;
      protected static final BlockState GRAVEL;
      protected static final BlockState GRANITE;
      protected static final BlockState DIORITE;
      protected static final BlockState ANDESITE;
      protected static final BlockState COAL_ORE;
      protected static final BlockState IRON_ORE;
      protected static final BlockState GOLD_ORE;
      protected static final BlockState REDSTONE_ORE;
      protected static final BlockState DIAMOND_ORE;
      protected static final BlockState LAPIS_ORE;
      protected static final BlockState STONE;
      protected static final BlockState EMERALD_ORE;
      protected static final BlockState INFESTED_STONE;
      protected static final BlockState SAND;
      protected static final BlockState CLAY;
      protected static final BlockState MOSSY_COBBLESTONE;
      protected static final BlockState SEAGRASS;
      protected static final BlockState MAGMA_BLOCK;
      protected static final BlockState SOUL_SAND;
      protected static final BlockState NETHER_GOLD_ORE;
      protected static final BlockState NETHER_QUARTZ_ORE;
      protected static final BlockState BLACKSTONE;
      protected static final BlockState ANCIENT_DEBRIS;
      protected static final BlockState BASALT;
      protected static final BlockState CRIMSON_FUNGUS;
      protected static final BlockState WARPED_FUNGUS;
      protected static final BlockState WARPED_ROOTS;
      protected static final BlockState NETHER_SPROUTS;

      static {
         GRASS = Blocks.GRASS.defaultBlockState();
         FERN = Blocks.FERN.defaultBlockState();
         PODZOL = Blocks.PODZOL.defaultBlockState();
         COARSE_DIRT = Blocks.COARSE_DIRT.defaultBlockState();
         MYCELIUM = Blocks.MYCELIUM.defaultBlockState();
         SNOW_BLOCK = Blocks.SNOW_BLOCK.defaultBlockState();
         ICE = Blocks.ICE.defaultBlockState();
         OAK_LOG = Blocks.OAK_LOG.defaultBlockState();
         OAK_LEAVES = Blocks.OAK_LEAVES.defaultBlockState();
         JUNGLE_LOG = Blocks.JUNGLE_LOG.defaultBlockState();
         JUNGLE_LEAVES = Blocks.JUNGLE_LEAVES.defaultBlockState();
         SPRUCE_LOG = Blocks.SPRUCE_LOG.defaultBlockState();
         SPRUCE_LEAVES = Blocks.SPRUCE_LEAVES.defaultBlockState();
         ACACIA_LOG = Blocks.ACACIA_LOG.defaultBlockState();
         ACACIA_LEAVES = Blocks.ACACIA_LEAVES.defaultBlockState();
         BIRCH_LOG = Blocks.BIRCH_LOG.defaultBlockState();
         BIRCH_LEAVES = Blocks.BIRCH_LEAVES.defaultBlockState();
         DARK_OAK_LOG = Blocks.DARK_OAK_LOG.defaultBlockState();
         DARK_OAK_LEAVES = Blocks.DARK_OAK_LEAVES.defaultBlockState();
         GRASS_BLOCK = Blocks.GRASS_BLOCK.defaultBlockState();
         LARGE_FERN = Blocks.LARGE_FERN.defaultBlockState();
         TALL_GRASS = Blocks.TALL_GRASS.defaultBlockState();
         LILAC = Blocks.LILAC.defaultBlockState();
         ROSE_BUSH = Blocks.ROSE_BUSH.defaultBlockState();
         PEONY = Blocks.PEONY.defaultBlockState();
         BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM.defaultBlockState();
         RED_MUSHROOM = Blocks.RED_MUSHROOM.defaultBlockState();
         PACKED_ICE = Blocks.PACKED_ICE.defaultBlockState();
         BLUE_ICE = Blocks.BLUE_ICE.defaultBlockState();
         LILY_OF_THE_VALLEY = Blocks.LILY_OF_THE_VALLEY.defaultBlockState();
         BLUE_ORCHID = Blocks.BLUE_ORCHID.defaultBlockState();
         POPPY = Blocks.POPPY.defaultBlockState();
         DANDELION = Blocks.DANDELION.defaultBlockState();
         DEAD_BUSH = Blocks.DEAD_BUSH.defaultBlockState();
         MELON = Blocks.MELON.defaultBlockState();
         PUMPKIN = Blocks.PUMPKIN.defaultBlockState();
         SWEET_BERRY_BUSH = (BlockState)Blocks.SWEET_BERRY_BUSH.defaultBlockState().setValue(SweetBerryBushBlock.AGE, 3);
         FIRE = Blocks.FIRE.defaultBlockState();
         SOUL_FIRE = Blocks.SOUL_FIRE.defaultBlockState();
         NETHERRACK = Blocks.NETHERRACK.defaultBlockState();
         SOUL_SOIL = Blocks.SOUL_SOIL.defaultBlockState();
         CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.defaultBlockState();
         LILY_PAD = Blocks.LILY_PAD.defaultBlockState();
         SNOW = Blocks.SNOW.defaultBlockState();
         JACK_O_LANTERN = Blocks.JACK_O_LANTERN.defaultBlockState();
         SUNFLOWER = Blocks.SUNFLOWER.defaultBlockState();
         CACTUS = Blocks.CACTUS.defaultBlockState();
         SUGAR_CANE = Blocks.SUGAR_CANE.defaultBlockState();
         HUGE_RED_MUSHROOM = (BlockState)Blocks.RED_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false);
         HUGE_BROWN_MUSHROOM = (BlockState)((BlockState)Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.UP, true)).setValue(HugeMushroomBlock.DOWN, false);
         HUGE_MUSHROOM_STEM = (BlockState)((BlockState)Blocks.MUSHROOM_STEM.defaultBlockState().setValue(HugeMushroomBlock.UP, false)).setValue(HugeMushroomBlock.DOWN, false);
         WATER_STATE = Fluids.WATER.defaultFluidState();
         LAVA_STATE = Fluids.LAVA.defaultFluidState();
         WATER = Blocks.WATER.defaultBlockState();
         LAVA = Blocks.LAVA.defaultBlockState();
         DIRT = Blocks.DIRT.defaultBlockState();
         GRAVEL = Blocks.GRAVEL.defaultBlockState();
         GRANITE = Blocks.GRANITE.defaultBlockState();
         DIORITE = Blocks.DIORITE.defaultBlockState();
         ANDESITE = Blocks.ANDESITE.defaultBlockState();
         COAL_ORE = Blocks.COAL_ORE.defaultBlockState();
         IRON_ORE = Blocks.IRON_ORE.defaultBlockState();
         GOLD_ORE = Blocks.GOLD_ORE.defaultBlockState();
         REDSTONE_ORE = Blocks.REDSTONE_ORE.defaultBlockState();
         DIAMOND_ORE = Blocks.DIAMOND_ORE.defaultBlockState();
         LAPIS_ORE = Blocks.LAPIS_ORE.defaultBlockState();
         STONE = Blocks.STONE.defaultBlockState();
         EMERALD_ORE = Blocks.EMERALD_ORE.defaultBlockState();
         INFESTED_STONE = Blocks.INFESTED_STONE.defaultBlockState();
         SAND = Blocks.SAND.defaultBlockState();
         CLAY = Blocks.CLAY.defaultBlockState();
         MOSSY_COBBLESTONE = Blocks.MOSSY_COBBLESTONE.defaultBlockState();
         SEAGRASS = Blocks.SEAGRASS.defaultBlockState();
         MAGMA_BLOCK = Blocks.MAGMA_BLOCK.defaultBlockState();
         SOUL_SAND = Blocks.SOUL_SAND.defaultBlockState();
         NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.defaultBlockState();
         NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.defaultBlockState();
         BLACKSTONE = Blocks.BLACKSTONE.defaultBlockState();
         ANCIENT_DEBRIS = Blocks.ANCIENT_DEBRIS.defaultBlockState();
         BASALT = Blocks.BASALT.defaultBlockState();
         CRIMSON_FUNGUS = Blocks.CRIMSON_FUNGUS.defaultBlockState();
         WARPED_FUNGUS = Blocks.WARPED_FUNGUS.defaultBlockState();
         WARPED_ROOTS = Blocks.WARPED_ROOTS.defaultBlockState();
         NETHER_SPROUTS = Blocks.NETHER_SPROUTS.defaultBlockState();
      }
   }

   public static final class Decorators {
      public static final BeehiveDecorator BEEHIVE_0002 = new BeehiveDecorator(0.002F);
      public static final BeehiveDecorator BEEHIVE_002 = new BeehiveDecorator(0.02F);
      public static final BeehiveDecorator BEEHIVE_005 = new BeehiveDecorator(0.05F);
      public static final ConfiguredDecorator<CountConfiguration> FIRE;
      public static final ConfiguredDecorator<NoneDecoratorConfiguration> HEIGHTMAP;
      public static final ConfiguredDecorator<NoneDecoratorConfiguration> TOP_SOLID_HEIGHTMAP;
      public static final ConfiguredDecorator<NoneDecoratorConfiguration> HEIGHTMAP_WORLD_SURFACE;
      public static final ConfiguredDecorator<NoneDecoratorConfiguration> HEIGHTMAP_DOUBLE;
      public static final ConfiguredDecorator<RangeDecoratorConfiguration> RANGE_10_20_ROOFED;
      public static final ConfiguredDecorator<RangeDecoratorConfiguration> RANGE_4_8_ROOFED;
      public static final ConfiguredDecorator<?> ADD_32;
      public static final ConfiguredDecorator<?> HEIGHTMAP_SQUARE;
      public static final ConfiguredDecorator<?> HEIGHTMAP_DOUBLE_SQUARE;
      public static final ConfiguredDecorator<?> TOP_SOLID_HEIGHTMAP_SQUARE;

      static {
         FIRE = FeatureDecorator.FIRE.configured(new CountConfiguration(10));
         HEIGHTMAP = FeatureDecorator.HEIGHTMAP.configured(DecoratorConfiguration.NONE);
         TOP_SOLID_HEIGHTMAP = FeatureDecorator.TOP_SOLID_HEIGHTMAP.configured(DecoratorConfiguration.NONE);
         HEIGHTMAP_WORLD_SURFACE = FeatureDecorator.HEIGHTMAP_WORLD_SURFACE.configured(DecoratorConfiguration.NONE);
         HEIGHTMAP_DOUBLE = FeatureDecorator.HEIGHTMAP_SPREAD_DOUBLE.configured(DecoratorConfiguration.NONE);
         RANGE_10_20_ROOFED = FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(10, 20, 128));
         RANGE_4_8_ROOFED = FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(4, 8, 128));
         ADD_32 = FeatureDecorator.SPREAD_32_ABOVE.configured(NoneDecoratorConfiguration.INSTANCE);
         HEIGHTMAP_SQUARE = (ConfiguredDecorator)HEIGHTMAP.squared();
         HEIGHTMAP_DOUBLE_SQUARE = (ConfiguredDecorator)HEIGHTMAP_DOUBLE.squared();
         TOP_SOLID_HEIGHTMAP_SQUARE = (ConfiguredDecorator)TOP_SOLID_HEIGHTMAP.squared();
      }
   }
}
