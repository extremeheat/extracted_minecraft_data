package net.minecraft.world.level.block.state.properties;

import java.util.function.Predicate;
import net.minecraft.core.Direction;

public class BlockStateProperties {
   public static final BooleanProperty ATTACHED = BooleanProperty.create("attached");
   public static final BooleanProperty BOTTOM = BooleanProperty.create("bottom");
   public static final BooleanProperty CONDITIONAL = BooleanProperty.create("conditional");
   public static final BooleanProperty DISARMED = BooleanProperty.create("disarmed");
   public static final BooleanProperty DRAG = BooleanProperty.create("drag");
   public static final BooleanProperty ENABLED = BooleanProperty.create("enabled");
   public static final BooleanProperty EXTENDED = BooleanProperty.create("extended");
   public static final BooleanProperty EYE = BooleanProperty.create("eye");
   public static final BooleanProperty FALLING = BooleanProperty.create("falling");
   public static final BooleanProperty HANGING = BooleanProperty.create("hanging");
   public static final BooleanProperty HAS_BOTTLE_0 = BooleanProperty.create("has_bottle_0");
   public static final BooleanProperty HAS_BOTTLE_1 = BooleanProperty.create("has_bottle_1");
   public static final BooleanProperty HAS_BOTTLE_2 = BooleanProperty.create("has_bottle_2");
   public static final BooleanProperty HAS_RECORD = BooleanProperty.create("has_record");
   public static final BooleanProperty HAS_BOOK = BooleanProperty.create("has_book");
   public static final BooleanProperty INVERTED = BooleanProperty.create("inverted");
   public static final BooleanProperty IN_WALL = BooleanProperty.create("in_wall");
   public static final BooleanProperty LIT = BooleanProperty.create("lit");
   public static final BooleanProperty LOCKED = BooleanProperty.create("locked");
   public static final BooleanProperty OCCUPIED = BooleanProperty.create("occupied");
   public static final BooleanProperty OPEN = BooleanProperty.create("open");
   public static final BooleanProperty PERSISTENT = BooleanProperty.create("persistent");
   public static final BooleanProperty POWERED = BooleanProperty.create("powered");
   public static final BooleanProperty SHORT = BooleanProperty.create("short");
   public static final BooleanProperty SIGNAL_FIRE = BooleanProperty.create("signal_fire");
   public static final BooleanProperty SNOWY = BooleanProperty.create("snowy");
   public static final BooleanProperty TRIGGERED = BooleanProperty.create("triggered");
   public static final BooleanProperty UNSTABLE = BooleanProperty.create("unstable");
   public static final BooleanProperty WATERLOGGED = BooleanProperty.create("waterlogged");
   public static final EnumProperty<Direction.Axis> HORIZONTAL_AXIS;
   public static final EnumProperty<Direction.Axis> AXIS;
   public static final BooleanProperty UP;
   public static final BooleanProperty DOWN;
   public static final BooleanProperty NORTH;
   public static final BooleanProperty EAST;
   public static final BooleanProperty SOUTH;
   public static final BooleanProperty WEST;
   public static final DirectionProperty FACING;
   public static final DirectionProperty FACING_HOPPER;
   public static final DirectionProperty HORIZONTAL_FACING;
   public static final EnumProperty<AttachFace> ATTACH_FACE;
   public static final EnumProperty<BellAttachType> BELL_ATTACHMENT;
   public static final EnumProperty<RedstoneSide> EAST_REDSTONE;
   public static final EnumProperty<RedstoneSide> NORTH_REDSTONE;
   public static final EnumProperty<RedstoneSide> SOUTH_REDSTONE;
   public static final EnumProperty<RedstoneSide> WEST_REDSTONE;
   public static final EnumProperty<DoubleBlockHalf> DOUBLE_BLOCK_HALF;
   public static final EnumProperty<Half> HALF;
   public static final EnumProperty<RailShape> RAIL_SHAPE;
   public static final EnumProperty<RailShape> RAIL_SHAPE_STRAIGHT;
   public static final IntegerProperty AGE_1;
   public static final IntegerProperty AGE_2;
   public static final IntegerProperty AGE_3;
   public static final IntegerProperty AGE_5;
   public static final IntegerProperty AGE_7;
   public static final IntegerProperty AGE_15;
   public static final IntegerProperty AGE_25;
   public static final IntegerProperty BITES;
   public static final IntegerProperty DELAY;
   public static final IntegerProperty DISTANCE;
   public static final IntegerProperty EGGS;
   public static final IntegerProperty HATCH;
   public static final IntegerProperty LAYERS;
   public static final IntegerProperty LEVEL_CAULDRON;
   public static final IntegerProperty LEVEL_COMPOSTER;
   public static final IntegerProperty LEVEL_FLOWING;
   public static final IntegerProperty LEVEL;
   public static final IntegerProperty MOISTURE;
   public static final IntegerProperty NOTE;
   public static final IntegerProperty PICKLES;
   public static final IntegerProperty POWER;
   public static final IntegerProperty STAGE;
   public static final IntegerProperty STABILITY_DISTANCE;
   public static final IntegerProperty ROTATION_16;
   public static final EnumProperty<BedPart> BED_PART;
   public static final EnumProperty<ChestType> CHEST_TYPE;
   public static final EnumProperty<ComparatorMode> MODE_COMPARATOR;
   public static final EnumProperty<DoorHingeSide> DOOR_HINGE;
   public static final EnumProperty<NoteBlockInstrument> NOTEBLOCK_INSTRUMENT;
   public static final EnumProperty<PistonType> PISTON_TYPE;
   public static final EnumProperty<SlabType> SLAB_TYPE;
   public static final EnumProperty<StairsShape> STAIRS_SHAPE;
   public static final EnumProperty<StructureMode> STRUCTUREBLOCK_MODE;
   public static final EnumProperty<BambooLeaves> BAMBOO_LEAVES;

   static {
      HORIZONTAL_AXIS = EnumProperty.create("axis", Direction.Axis.class, (Enum[])(Direction.Axis.X, Direction.Axis.Z));
      AXIS = EnumProperty.create("axis", Direction.Axis.class);
      UP = BooleanProperty.create("up");
      DOWN = BooleanProperty.create("down");
      NORTH = BooleanProperty.create("north");
      EAST = BooleanProperty.create("east");
      SOUTH = BooleanProperty.create("south");
      WEST = BooleanProperty.create("west");
      FACING = DirectionProperty.create("facing", Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST, Direction.UP, Direction.DOWN);
      FACING_HOPPER = DirectionProperty.create("facing", (var0) -> {
         return var0 != Direction.UP;
      });
      HORIZONTAL_FACING = DirectionProperty.create("facing", (Predicate)Direction.Plane.HORIZONTAL);
      ATTACH_FACE = EnumProperty.create("face", AttachFace.class);
      BELL_ATTACHMENT = EnumProperty.create("attachment", BellAttachType.class);
      EAST_REDSTONE = EnumProperty.create("east", RedstoneSide.class);
      NORTH_REDSTONE = EnumProperty.create("north", RedstoneSide.class);
      SOUTH_REDSTONE = EnumProperty.create("south", RedstoneSide.class);
      WEST_REDSTONE = EnumProperty.create("west", RedstoneSide.class);
      DOUBLE_BLOCK_HALF = EnumProperty.create("half", DoubleBlockHalf.class);
      HALF = EnumProperty.create("half", Half.class);
      RAIL_SHAPE = EnumProperty.create("shape", RailShape.class);
      RAIL_SHAPE_STRAIGHT = EnumProperty.create("shape", RailShape.class, (var0) -> {
         return var0 != RailShape.NORTH_EAST && var0 != RailShape.NORTH_WEST && var0 != RailShape.SOUTH_EAST && var0 != RailShape.SOUTH_WEST;
      });
      AGE_1 = IntegerProperty.create("age", 0, 1);
      AGE_2 = IntegerProperty.create("age", 0, 2);
      AGE_3 = IntegerProperty.create("age", 0, 3);
      AGE_5 = IntegerProperty.create("age", 0, 5);
      AGE_7 = IntegerProperty.create("age", 0, 7);
      AGE_15 = IntegerProperty.create("age", 0, 15);
      AGE_25 = IntegerProperty.create("age", 0, 25);
      BITES = IntegerProperty.create("bites", 0, 6);
      DELAY = IntegerProperty.create("delay", 1, 4);
      DISTANCE = IntegerProperty.create("distance", 1, 7);
      EGGS = IntegerProperty.create("eggs", 1, 4);
      HATCH = IntegerProperty.create("hatch", 0, 2);
      LAYERS = IntegerProperty.create("layers", 1, 8);
      LEVEL_CAULDRON = IntegerProperty.create("level", 0, 3);
      LEVEL_COMPOSTER = IntegerProperty.create("level", 0, 8);
      LEVEL_FLOWING = IntegerProperty.create("level", 1, 8);
      LEVEL = IntegerProperty.create("level", 0, 15);
      MOISTURE = IntegerProperty.create("moisture", 0, 7);
      NOTE = IntegerProperty.create("note", 0, 24);
      PICKLES = IntegerProperty.create("pickles", 1, 4);
      POWER = IntegerProperty.create("power", 0, 15);
      STAGE = IntegerProperty.create("stage", 0, 1);
      STABILITY_DISTANCE = IntegerProperty.create("distance", 0, 7);
      ROTATION_16 = IntegerProperty.create("rotation", 0, 15);
      BED_PART = EnumProperty.create("part", BedPart.class);
      CHEST_TYPE = EnumProperty.create("type", ChestType.class);
      MODE_COMPARATOR = EnumProperty.create("mode", ComparatorMode.class);
      DOOR_HINGE = EnumProperty.create("hinge", DoorHingeSide.class);
      NOTEBLOCK_INSTRUMENT = EnumProperty.create("instrument", NoteBlockInstrument.class);
      PISTON_TYPE = EnumProperty.create("type", PistonType.class);
      SLAB_TYPE = EnumProperty.create("type", SlabType.class);
      STAIRS_SHAPE = EnumProperty.create("shape", StairsShape.class);
      STRUCTUREBLOCK_MODE = EnumProperty.create("mode", StructureMode.class);
      BAMBOO_LEAVES = EnumProperty.create("leaves", BambooLeaves.class);
   }
}
